-- 1. Total no.of orders placed 
SELECT   COUNT(*) AS Total_number_of_orders FROM orders;

-- 2. Total revenue generated from pizza sales.
SELECT   SUM(o.quantity * p.price) AS total_sales FROM  order_details o
 JOIN pizzas p ON o.pizza_id = p.pizza_id; 

-- 3. Highest-priced pizza.
SELECT  pt.name, p.price
FROM  pizza_types pt
 JOIN pizzas p ON pt.pizza_type_id = p.pizza_type_id
ORDER BY  price DESC
LIMIT 1;

-- 4. Most common pizza size ordered
SELECT   COUNT(od.order_details_id) AS order_COUNT, p.size
FROM order_details od
JOIN  pizzas p ON od.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY  order_COUNT DESC
LIMIT 1

-- 5. Top 5 most ordered pizza types along with their quantities 
SELECT pt.name, SUM(od.quantity) AS quantity
FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.name
ORDER BY  quantity DESC
LIMIT 5;

-- 6. Total quantity of each pizza category ordered.
SELECT SUM(od.quantity) AS Total_quantity, pt.category
FROM order_details od
 JOIN pizzas p ON od.pizza_id = p.pizza_id
JOIN pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.category
ORDER BY  Total_quantity DESC;

-- 7. Distribution of orders by hour of the day.
SELECT HOUR(order_time) AS Hours, COUNT(order_id) AS Orders_COUNT
FROM orders
GROUP BY Hours;

--8.  Category-wise distribution of pizzas
SELECT category, COUNT(name)
FROM pizza_types
GROUP BY category;

-- 9. Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT ROUND(AVG(quantity), 0) FROM
    (SELECT o.order_date, SUM(od.quantity) AS quantity FROM orders o
    JOIN order_details od ON od.order_id = o.order_id
    GROUP BY o.order_date) AS Order_quantity

-- 10. Top 3 most ordered pizza types based on revenue.
SELECT pt.name, SUM(p.price * od.quantity) AS revenue
FROM pizza_types pt
JOIN pizzas p ON p.pizza_type_id = pt.pizza_type_id
JOIN order_details od ON od.pizza_id = p.pizza_id
GROUP BY pt.name
ORDER BY  revenue DESC
LIMIT 3;

-- 10. Percentage contribution of each pizza type to total revenue.
SELECT pt.category, round(SUM(p.price * od.quantity)/(SELECT  round(SUM(od.quantity * p.price),0) AS total_sales FROM order_details od
JOIN pizzas p ON od.pizza_id = p.pizza_id) * 100,2) AS revenue
FROM pizza_types pt
 JOIN pizzas p ON p.pizza_type_id = pt.pizza_type_id
 JOIN order_details od ON od.pizza_id = p.pizza_id
 GROUP BY pt.category
 ORDER BY  revenue DESC;

-- 11. Cumulative revenue generated over time
SELECT order_date, SUM(revenue) over(ORDER BY  order_date) AS Cummulative_revenue FROM 
(SELECT o.order_date,SUM(od.quantity * p.price) AS revenue  FROM orders o 
JOIN order_details od on o.order_id = od.order_id
JOIN pizzAS p on p.pizza_id = od.pizza_id
GROUP BY o.order_date) AS total_revenue;

-- 12. Top 3 most ordered pizza types based on revenue for each pizza category.
 SELECT category, name, revenue, top_3 FROM 
  (SELECT category, name, revenue, rank() over(partition by category ORDER BY  revenue DESC)  AS Top_3 FROM
(SELECT pt.category,pt.name, SUM(od.quantity * p.price) AS revenue FROM pizza_types pt
JOIN pizzAS p on p.pizza_type_id = pt.pizza_type_id
JOIN order_details od on od.pizza_id = p.pizza_id
GROUP BY pt.category,pt.name) AS Total_revenue) AS rn 
WHERE top_3 <= 3;
